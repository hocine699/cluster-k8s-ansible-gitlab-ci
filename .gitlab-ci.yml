# ================================================================================================
# PIPELINE APPLICATIF MINIMAL - D√©ploiement d'applications sur Kubernetes existant
# ================================================================================================
# Ce pipeline ne d√©ploie PAS d'infrastructure Kubernetes
# Il d√©ploie uniquement des applications sur un cluster K8s d√©j√† existant

stages:
  - deploy-app

variables:
  # IPs du cluster Kubernetes existant
  K8S_MASTER_IP: "192.168.1.72"
  K8S_WORKER1_IP: "192.168.1.73"
  K8S_WORKER2_IP: "192.168.1.74"

# Template minimal pour d√©ploiement applicatif
.app_deploy: &app_deploy
  image: mon-runner-devops:latest
  tags:
    - synology
  before_script:
    - mkdir -p ~/.ssh ~/.kube
    # Debug variables disponibles
    - echo "=== DEBUG VARIABLES ==="
    - echo "Variables disponibles contenant SSH:"
    - env | grep -i ssh || echo "Aucune variable SSH trouv√©e"
    - echo "Longueur SSH_PRIVATE_KEY:" 
    - echo ${#SSH_PRIVATE_KEY}
    - echo "Test variable SSH_PRIVATE_KEY d√©finie:"
    - test -n "$SSH_PRIVATE_KEY" && echo "DEFINIE" || echo "NON DEFINIE"
    
    # Configuration SSH si disponible
    - |
      if [ -n "$SSH_PRIVATE_KEY" ]; then
        echo "SSH_PRIVATE_KEY trouv√©e, configuration..."
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "SSH configur√© avec succ√®s"
      else
        echo "ERROR: Variable SSH_PRIVATE_KEY non trouv√©e!"
        echo "V√©rifiez dans Settings > CI/CD > Variables:"
        echo "1. Variable SSH_PRIVATE_KEY existe"
        echo "2. Environment scope = All (default)"
        echo "3. Protected = true si branche prot√©g√©e"
        exit 1
      fi

# ================================================================================================
# JOB DE TEST HELM - V√©rification Helm disponible
# ================================================================================================
test_helm:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/
  script:
    - echo "=== TEST HELM DISPONIBLE ==="
    - helm version --client
    - echo "=== RECUPERATION KUBECONFIG ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    - echo "=== TEST HELM AVEC CLUSTER ==="
    - helm list -A || echo "Pas de releases Helm install√©es"
    - kubectl get pods -A | head -5
    - echo "Helm pr√™t pour d√©ploiement ! üöÄ"

# ================================================================================================
# JOB DE TEST APPLICATIF - Nginx sur cluster existant
# ================================================================================================
# ================================================================================================
# JOB METRICS - D√©ploiement exporters pour Prometheus NAS
# ================================================================================================
deploy_cluster_metrics:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/
  when: manual
  script:
    - echo "=== DEPLOIEMENT EXPORTERS POUR PROMETHEUS NAS ==="
    - echo "Node Exporter + kube-state-metrics"
    - echo "=== Recuperation kubeconfig ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    - echo "=== DEPLOIEMENT EXPORTERS AVEC HELM ==="
    - cd helm-charts/cluster-metrics
    - helm upgrade --install cluster-metrics . --namespace kube-system
    - sleep 30
    - echo "=== VERIFICATION EXPORTERS ==="
    - kubectl get pods -n kube-system -l app=node-exporter
    - kubectl get svc -n kube-system -l app=node-exporter
    - echo ""
    - echo "=== ENDPOINTS POUR PROMETHEUS NAS ==="
    - echo "Node Exporter http://192.168.1.72:30910/metrics"
    - echo "Node Exporter http://192.168.1.73:30910/metrics"
    - echo "Node Exporter http://192.168.1.74:30910/metrics"
    - echo "Utilisez prometheus-nas-config.yml pour configuration"

# ================================================================================================
# JOB MONITORING - D√©ploiement Prometheus + Grafana
# ================================================================================================
deploy_monitoring:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/
  when: manual
  script:
    - echo "=== DEPLOIEMENT STACK MONITORING ==="
    - echo "Prometheus + Grafana + Node Exporter"
    
    # R√©cup√©ration kubeconfig
    - echo "=== Recuperation kubeconfig ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    
    # D√©ploiement monitoring
    - echo "=== DEPLOIEMENT MONITORING AVEC HELM ==="
    - cd helm-charts/monitoring
    - helm upgrade --install monitoring-stack . --namespace monitoring --create-namespace
    - sleep 60
    
    # V√©rification
    - echo "=== VERIFICATION MONITORING ==="
    - kubectl get pods -n monitoring
    - kubectl get svc -n monitoring
    - echo ""
    - echo "=== ACCES MONITORING ==="
    - echo "Prometheus http://$K8S_MASTER_IP:30909"
    - echo "Grafana http://$K8S_MASTER_IP:30300"
    - echo "Login Grafana admin / monitoring123"

# ================================================================================================
# JOB HELM - D√©ploiement avec Helm charts
# ================================================================================================
deploy_helm_app:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/  # Branches test-* uniquement
  script:
    - echo "=== DEPLOIEMENT HELM NGINX ==="
    - echo "Cluster cible - $K8S_MASTER_IP"
    
    # R√©cup√©ration kubeconfig
    - echo "=== Recuperation kubeconfig ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    
    # Test Helm
    - echo "=== VERIFICATION HELM ==="
    - helm version --client
    - helm list -A
    
    # D√©ploiement avec Helm
    - echo "=== DEPLOIEMENT NGINX AVEC HELM ==="
    - cd helm-charts/nginx-app
    - helm upgrade --install nginx-release . --namespace default
    - sleep 30
    
    # V√©rification
    - echo "=== VERIFICATION ==="
    - helm list
    - kubectl get pods -l app.kubernetes.io/name=nginx-app
    - kubectl get svc -l app.kubernetes.io/name=nginx-app
    - echo "Nginx Helm accessible sur http://$K8S_MASTER_IP:30090"

deploy_test_app:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/  # Branches test-* uniquement  
  when: manual
  script:
    - echo "=== DEPLOIEMENT TOUTES APPLICATIONS ==="
    - echo "Cluster cible - $K8S_MASTER_IP"
    - echo "Applications - Nginx (port 30090) + Redis (port 30379)"
    
    # Test connectivit√© cluster
    - echo "=== Test connectivite ==="
    - ping -c 2 $K8S_MASTER_IP || echo "Ping failed but continuing..."
    - nc -zv $K8S_MASTER_IP 6443 || echo "API server test failed but continuing..."
    
    # R√©cup√©ration kubeconfig
    - echo "=== Recuperation kubeconfig ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    
    # DEPLOIEMENT REEL des applications
    - echo "=== DEPLOIEMENT REEL ==="
    - echo "Nettoyage des anciennes versions..."
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - kubectl delete deployment redis-app --ignore-not-found=true
    - kubectl delete service redis-service --ignore-not-found=true
    - sleep 5
    
    - echo "Applications nginx et redis supprim√©es"
    - echo "Plus de d√©ploiement - applications retir√©es du cluster"
    - sleep 5
    
    # V√©rification du d√©ploiement
    - echo "=== VERIFICATION ==="
    - kubectl get pods
    - kubectl get svc
    - echo ""
    - echo "=== ACCES APPLICATIONS ==="
    - echo "Nginx accessible sur http://$K8S_MASTER_IP:30090"
    - echo "Redis accessible sur port 30379"

# ================================================================================================
# JOB MANUEL - D√©ploiement sur main avec d√©pendances
# ================================================================================================
deploy_app_manual:
  stage: deploy-app
  <<: *app_deploy
  only:
    - main
  when: manual
  allow_failure: true
  script:
    - echo "=== DEPLOIEMENT MANUEL APPLICATION ==="
    - scp -o StrictHostKeyChecking=no hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - sleep 5
    - echo "Applications supprim√©es du cluster"
    - sleep 10
    - kubectl get pods -l app=nginx-test
    - kubectl get svc nginx-test-service
    - echo "Application accessible sur http://$K8S_MASTER_IP:30090"

# ================================================================================================
# JOB MANUEL - D√©ploiement TOUTES applications avec kubectl
# ================================================================================================
deploy_all_apps_manual:
  stage: deploy-app
  <<: *app_deploy
  only:
    - main
  when: manual
  allow_failure: true
  script:
    - echo "=== DEPLOIEMENT MANUEL TOUTES APPLICATIONS ==="
    - scp -o StrictHostKeyChecking=no hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    # Nettoyage
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - kubectl delete deployment redis-app --ignore-not-found=true
    - kubectl delete service redis-service --ignore-not-found=true
    - sleep 5
    # Applications supprim√©es - plus de d√©ploiement
    - echo "Applications nginx et redis supprim√©es du cluster"
    - sleep 5
    # V√©rification
    - kubectl get pods
    - kubectl get svc
    - echo "Nginx accessible sur http://$K8S_MASTER_IP:30090"
    - echo "Redis accessible sur port 30379"