# ================================================================================================
# PIPELINE APPLICATIF MINIMAL - Déploiement d'applications sur Kubernetes existant
# ================================================================================================
# Ce pipeline ne déploie PAS d'infrastructure Kubernetes
# Il déploie uniquement des applications sur un cluster K8s déjà existant

stages:
  - deploy-app

variables:
  # IPs du cluster Kubernetes existant
  K8S_MASTER_IP: "192.168.1.72"
  K8S_WORKER1_IP: "192.168.1.73"
  K8S_WORKER2_IP: "192.168.1.74"

# Template minimal pour déploiement applicatif
.app_deploy: &app_deploy
  image: mon-runner-devops:latest
  tags:
    - synology
  before_script:
    - mkdir -p ~/.ssh ~/.kube
    # Debug variables disponibles
    - echo "=== DEBUG VARIABLES ==="
    - echo "Variables disponibles contenant SSH:"
    - env | grep -i ssh || echo "Aucune variable SSH trouvée"
    - echo "Longueur SSH_PRIVATE_KEY:" 
    - echo ${#SSH_PRIVATE_KEY}
    - echo "Test variable SSH_PRIVATE_KEY définie:"
    - test -n "$SSH_PRIVATE_KEY" && echo "DEFINIE" || echo "NON DEFINIE"
    
    # Configuration SSH si disponible
    - |
      if [ -n "$SSH_PRIVATE_KEY" ]; then
        echo "SSH_PRIVATE_KEY trouvée, configuration..."
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "SSH configuré avec succès"
      else
        echo "ERROR: Variable SSH_PRIVATE_KEY non trouvée!"
        echo "Vérifiez dans Settings > CI/CD > Variables:"
        echo "1. Variable SSH_PRIVATE_KEY existe"
        echo "2. Environment scope = All (default)"
        echo "3. Protected = true si branche protégée"
        exit 1
      fi

# ================================================================================================
# JOB DE TEST SANS SSH - Test direct kubectl
# ================================================================================================
test_kubectl_direct:
  stage: deploy-app
  image: mon-runner-devops:latest
  tags:
    - synology
  only:
    - /^test-.*$/
  script:
    - echo "=== TEST DIRECT KUBECTL ==="
    - echo "Tentative connexion directe au cluster..."
    - kubectl --server=https://$K8S_MASTER_IP:6443 --insecure-skip-tls-verify get nodes || echo "Connexion directe échouée"
    - echo "Si ça marche, on peut éviter SSH !"

# ================================================================================================
# JOB DE TEST APPLICATIF - Nginx sur cluster existant
# ================================================================================================
deploy_test_app:
  stage: deploy-app
  <<: *app_deploy
  only:
    - /^test-.*$/  # Branches test-* uniquement
  script:
    - echo "=== DEPLOIEMENT TOUTES APPLICATIONS ==="
    - echo "Cluster cible - $K8S_MASTER_IP"
    - echo "Applications - Nginx (port 30090) + Redis (port 30379)"
    
    # Test connectivité cluster
    - echo "=== Test connectivite ==="
    - ping -c 2 $K8S_MASTER_IP || echo "Ping failed but continuing..."
    - nc -zv $K8S_MASTER_IP 6443 || echo "API server test failed but continuing..."
    
    # Récupération kubeconfig
    - echo "=== Recuperation kubeconfig ==="
    - scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    
    # DEPLOIEMENT REEL des applications
    - echo "=== DEPLOIEMENT REEL ==="
    - echo "Nettoyage des anciennes versions..."
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - kubectl delete deployment redis-app --ignore-not-found=true
    - kubectl delete service redis-service --ignore-not-found=true
    - sleep 5
    
    - echo "Applications nginx et redis supprimées"
    - echo "Plus de déploiement - applications retirées du cluster"
    - sleep 5
    
    # Vérification du déploiement
    - echo "=== VERIFICATION ==="
    - kubectl get pods
    - kubectl get svc
    - echo ""
    - echo "=== ACCES APPLICATIONS ==="
    - echo "Nginx accessible sur http://$K8S_MASTER_IP:30090"
    - echo "Redis accessible sur port 30379"

# ================================================================================================
# JOB MANUEL - Déploiement sur main avec dépendances
# ================================================================================================
deploy_app_manual:
  stage: deploy-app
  <<: *app_deploy
  only:
    - main
  when: manual
  allow_failure: true
  script:
    - echo "=== DEPLOIEMENT MANUEL APPLICATION ==="
    - scp -o StrictHostKeyChecking=no hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - sleep 5
    - echo "Applications supprimées du cluster"
    - sleep 10
    - kubectl get pods -l app=nginx-test
    - kubectl get svc nginx-test-service
    - echo "Application accessible sur http://$K8S_MASTER_IP:30090"

# ================================================================================================
# JOB MANUEL - Déploiement TOUTES applications avec kubectl
# ================================================================================================
deploy_all_apps_manual:
  stage: deploy-app
  <<: *app_deploy
  only:
    - main
  when: manual
  allow_failure: true
  script:
    - echo "=== DEPLOIEMENT MANUEL TOUTES APPLICATIONS ==="
    - scp -o StrictHostKeyChecking=no hocine@$K8S_MASTER_IP:~/.kube/config ~/.kube/config
    # Nettoyage
    - kubectl delete deployment nginx-test --ignore-not-found=true
    - kubectl delete service nginx-test-service --ignore-not-found=true
    - kubectl delete deployment redis-app --ignore-not-found=true
    - kubectl delete service redis-service --ignore-not-found=true
    - sleep 5
    # Applications supprimées - plus de déploiement
    - echo "Applications nginx et redis supprimées du cluster"
    - sleep 5
    # Vérification
    - kubectl get pods
    - kubectl get svc
    - echo "Nginx accessible sur http://$K8S_MASTER_IP:30090"
    - echo "Redis accessible sur port 30379"